#include <Adafruit_GFX.h>
#include <Adafruit_ST7735.h>
#include <SPI.h>
#include <DFRobot_BMX160.h>

#define TFT_CS    10
#define TFT_RST   6 
#define TFT_DC    7 
#define TFT_SCLK  13   
#define TFT_MOSI  11   

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);
DFRobot_BMX160 bmx160;

const int buttonPin1 = 2;
const int buttonPin2 = 3;
const int buttonPin3 = 4;
const int buttonPin4 = 5;

int currentMenu = 0;
int selectedMenu = 1;
bool menuInitialized[8] = {false};
bool mainMenuInitialized = false;

bool waitingForRelease = false;
unsigned long releaseStartTime = 0;
bool debounceComplete = true;

int graphX = 0;
unsigned long lastGraphUpdate = 0;
const unsigned long graphInterval = 50;

void setup() {
  Serial.begin(9600);

  tft.initR(INITR_BLACKTAB);
  tft.setRotation(3);
  tft.fillScreen(ST77XX_BLACK);

  pinMode(buttonPin1, INPUT_PULLUP);
  pinMode(buttonPin2, INPUT_PULLUP);
  pinMode(buttonPin3, INPUT_PULLUP);
  pinMode(buttonPin4, INPUT_PULLUP);

  if (!bmx160.begin()) {
    Serial.println("BMX160 failed");
    tft.setCursor(10, 60);
    tft.setTextColor(ST77XX_RED);
    tft.setTextSize(2);
    tft.println("Sensor Fail");
    return;
  }
}

void loop() {
  if (currentMenu == 0) {
    showMainMenu();
    checkMainMenuButtons();
  } else {
    if (millis() - lastGraphUpdate >= graphInterval) {
      lastGraphUpdate = millis();
      showSensorGraph(currentMenu);
    }
  }
}

void showSensorGraph(int type) {
  sBmx160SensorData_t Omagn, Ogyro, Oaccel;
  bmx160.getAllData(&Omagn, &Ogyro, &Oaccel);
  
//prints values to monitor so that we can visually see that the sensors are working
  Serial.print("ACC  X:"); Serial.print(Oaccel.x);
  Serial.print(" Y:"); Serial.print(Oaccel.y);
  Serial.print(" Z:"); Serial.print(Oaccel.z);
  Serial.print("   |  GYRO  X:"); Serial.print(Ogyro.x);
  Serial.print(" Y:"); Serial.print(Ogyro.y);
  Serial.print(" Z:"); Serial.print(Ogyro.z);
  Serial.print("   |  MAG  X:"); Serial.print(Omagn.x);
  Serial.print(" Y:"); Serial.print(Omagn.y);
  Serial.print(" Z:"); Serial.println(Omagn.z);

  int x = 0, y = 0, z = 0;
//maps raw readings and transforms them into dispalayable coordiantes
   if (type == 1) {
    x = map(Oaccel.x, -16000, 16000, 128, 10);//set graph coords
    y = map(Oaccel.y, -16000, 16000, 128, 10);//set graph coords
    z = map(Oaccel.z, -16000, 16000, 128, 10);//set graph coords
  } else if (type == 2) {
    x = map(Ogyro.x, -16000, 16000, 128, 10);//set graph coords
    y = map(Ogyro.y, -16000, 16000, 128, 10);//set graph coords
    z = map(Ogyro.z, -16000, 16000, 128, 10);//set graph coords
  } else if (type == 3) {
    x = map(Omagn.x, -500, 500, 128, 10);//set graph coords
    y = map(Omagn.y, -500, 500, 128, 10);//set graph coords
    z = map(Omagn.z, -500, 500, 128, 10);//set graph coords
  } else if (type == 4) {
    x = map(?SENSOR-X?, -16000, 16000, 128, 10);//set graph coords
    y = map(?SENSOR-Y?, -16000, 16000, 128, 10);//set graph coords
    z = map(?SENSOR-Z?, -16000, 16000, 128, 10);//set graph coords
  } else if (type == 5) {
    x = map(?SENSOR-X?, -500, 500, 128, 10);//set graph coords
    y = map(?SENSOR-Y?, -500, 500, 128, 10);//set graph coords
    z = map(?SENSOR-Z?, -500, 500, 128, 10);//set graph coords
  } else if (type == 6) {
    x = map(?SENSOR-X?, -16000, 16000, 128, 10);//set graph coords
    y = map(?SENSOR-Y?, -16000, 16000, 128, 10);//set graph coords
    z = map(?SENSOR-Z?, -16000, 16000, 128, 10);//set graph coords
  } else if (type == 7) {
    x = map(?SENSOR-X?, -500, 500, 128, 10);//set graph coords
    y = map(?SENSOR-Y?, -500, 500, 128, 10);//set graph coords
    z = map(?SENSOR-Z?, -500, 500, 128, 10);//set graph coords
  } else if (type == 8) {
    x = map(?SENSOR-X?, -16000, 16000, 128, 10);//set graph coords
    y = map(?SENSOR-Y?, -16000, 16000, 128, 10);//set graph coords
    z = map(?SENSOR-Z?, -16000, 16000, 128, 10);//set graph coords
  }

  if (!menuInitialized[type]) {
    tft.fillScreen(ST77XX_BLACK);
    tft.setCursor(10, 0);
    tft.setTextColor(ST77XX_CYAN);
    tft.setTextSize(1);
    switch (type) {
      case 1: tft.print("Accelerometer Graph"); break;
      case 2: tft.print("Gyroscope Graph"); break;
      case 3: tft.print("Magnetometer Graph"); break;
      case 4: tft.print("Menu 4 - Reserved"); break;
      case 5: tft.print("Menu 5 - Reserved"); break;
      case 6: tft.print("Menu 6 - Reserved"); break;
      case 7: tft.print("Menu 7 - Reserved"); break;
    }
    menuInitialized[type] = true;
  }
//print labels 
  if (graphX >= 160) {
    tft.fillRect(0, 10, 160, 118, ST77XX_BLACK);
    tft.setCursor(10, 0);
    tft.setTextColor(ST77XX_CYAN);
    tft.setTextSize(1);
    switch (type) {
      case 1: tft.print("Accelerometer Graph"); break;
      case 2: tft.print("Gyroscope Graph"); break;
      case 3: tft.print("Magnetometer Graph"); break;
      case 4: tft.print("------ Graph"); break;
      case 5: tft.print("------ Graph"); break;
      case 6: tft.print("------ Graph"); break;
      case 7: tft.print("------ Graph"); break;
      case 8: tft.print("------ Graph"); break;
    }
    graphX = 0;
  }

  tft.drawPixel(graphX, x, ST77XX_RED);
  tft.drawPixel(graphX, y, ST77XX_GREEN);
  tft.drawPixel(graphX, z, ST77XX_BLUE);
  graphX++;

  if (digitalRead(buttonPin4) == LOW) {
    waitForRelease(buttonPin4);
    currentMenu = 0;
    resetMenus();
    tft.fillScreen(ST77XX_BLACK);
  }
}

void checkMainMenuButtons() {
  waitForRelease(buttonPin1);
  waitForRelease(buttonPin2);
  waitForRelease(buttonPin3);
  waitForRelease(buttonPin4);

  if (digitalRead(buttonPin1) == LOW && debounceComplete) {
    selectedMenu--; //goes down a menu
    if (selectedMenu < 1) selectedMenu = 7; //loops back around
    mainMenuInitialized = false; //forced redraws
  } else if (digitalRead(buttonPin2) == LOW && debounceComplete) {
    selectedMenu++;
    if (selectedMenu > 7) selectedMenu = 1;
    mainMenuInitialized = false;
  } else if (digitalRead(buttonPin3) == LOW && debounceComplete) {
    currentMenu = selectedMenu;
    resetMenus();
    tft.fillScreen(ST77XX_BLACK);
  }
}

void showMainMenu() {
  if (!mainMenuInitialized) {
    tft.fillScreen(ST77XX_BLACK);
    tft.setCursor(10, 20);
    tft.setTextColor(ST77XX_YELLOW);
    tft.setTextSize(2);
    tft.println("Main Menu");

    tft.setTextSize(1);
    tft.setCursor(10, 50);
    for (int i = 1; i <= 7; i++) {
      if (i == selectedMenu) {
        tft.setTextColor(ST77XX_GREEN);
      } else {
        tft.setTextColor(ST77XX_WHITE);
      }
      tft.print("Menu ");
      tft.println(i);
    }
    mainMenuInitialized = true;
  }
}

void resetMenus() {
  mainMenuInitialized = false;
  for (int i = 0; i < 8; i++) {
    menuInitialized[i] = false;
  }
}

void waitForRelease(int buttonPin) {
  if (!waitingForRelease) {
    if (digitalRead(buttonPin) == LOW && debounceComplete) {
      waitingForRelease = true;
      debounceComplete = false;
    }
  } else {
    if (digitalRead(buttonPin) == HIGH) {
      releaseStartTime = millis();
      waitingForRelease = false;
    }
  }

  if (!debounceComplete && (millis() - releaseStartTime >= 150)) {
    debounceComplete = true;
  }
}
